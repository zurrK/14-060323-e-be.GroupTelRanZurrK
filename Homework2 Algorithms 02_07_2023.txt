Временная сложность алгоритма — это функция размера входных данных, равная максимальному количеству элементарных операций, проделываемых алгоритмом для решения задачи. 

task #1
START
READ number n
IF n == 1 THEN return
FOR i = 1, i <= n, i + 1
FOR j = 1; j <= n, j + 1
print "*"
BREAK
END

 временная сложность равна O(n), так как внутренний цикл выполняется только один раз для каждого значения i. 
task #2
START
READ number n
numbers i = 0, j = 0, a = 0
FOR i = n/2, i <= n; i + 1
FOR j = 2, j <= n, j * 2
a = a + n / 2
END
 временная сложность равна O(n log n), так как внешний цикл выполняется n/2 раз, а внутренний цикл — log n раз.

task #3
START
READ number n
number a = 0
FOR i = 0, i < n, i + 1
FOR j = n, j > i, j - 1
a = a + i + j
END


 временная сложность равна O(n^2), так как внешний цикл выполняется n раз, а внутренний цикл — n-i раз. Суммарное количество итераций равно n(n+1)/2, что асимптотически эквивалентно n^2. 
task #4
START
READ number n
numbers a = 0, i = n
WHILE i > 0
a = a + i
i = i / 2
END


 временная сложность равна O(log n), так как переменная i уменьшается в два раза на каждой итерации цикла. Количество итераций равно log n, где log — это логарифм по основанию 2. 